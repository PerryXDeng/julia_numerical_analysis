#=
Workshop #5 Solutions

Contributors:
Owen Miller
Perry Deng
Clarissa Xue
=#

# ========== Question 1 ===========
using ForwardDiff # for efficient differentiation with automatic chainrule
#= implement Newton code (univariate) =#
function newton_method(f, x::Vector, num_iter::Int64;
                       forward_err_threshold::Float64=1e-8)
    f_prime = (x_in -> ForwardDiff.gradient(f, x_in)[1])
    #f_2prime = (x_in -> ForwardDiff.gradient(f_prime, x_in)[1])
    f_x = f(x)
    f_prime_x = f_prime(x)
    err = abs(f_x)
    println("step:", 0, ", ", x, " error:", err)
    for i in 1:num_iter
        x = [x[1] - f_x/f_prime_x] # conversion between scalar and vector gets complicated
        f_x = f(x)
        err = abs(f_x)
        f_prime_x = f_prime(x)
        println("step:",i, ", ", x, " error:", err)
        if iszero(f_prime_x)
            println("SINGULARITY")
            break
        end
        if isinf(x[1])
            println("SINGULARITY")
            break
        end
        if isinf(err) || isnan(err)
            println("DIVERGENCE/ERROR")
            break
        end
        if err < forward_err_threshold
            println("CONVERGENCE")
            break
        end
    end
    return x
end

function linear_func(x::Vector)
    return sum(x*5)
end
function affine_func(x::Vector)
    return sum(x*5 .+ 1)
end
function poly_func(x::Vector)
    return sum(x[1]^5 .+ 1)
end
println("f(x) = x*5")
root = newton_method(linear_func, [420.69], 50)
println("f(x) = x*5 + 1")
root = newton_method(affine_func, [420.69], 50)
println("f(x) = x^5 + 1")
root = newton_method(poly_func, [420.69], 50)
#= OUTPUT
f(x) = x*5
step:0, [420.69]
step:1, [5.684341886080802e-14] error:2103.45
step:2, [0.0] error:2.8421709430404007e-13
CONVERGENCE

f(x) = x*5 + 1
step:0, [420.69]
1, [-0.19999999999998863] error:2104.45
step:2, [-0.2] error:5.684341886080802e-14
CONVERGENCE

f(x) = x^5 + 1
step:0, [420.69]
step:1, [336.55199999999365] error:1.3176830024935041e13
step:2, [269.2415999999793] error:4.31778366257098e12
step:3, [215.3932799999454] error:1.4148513505515208e12
step:4, [172.31462399986341] error:4.636184905489852e11
step:5, [137.85169919966387] error:1.5191850698335425e11
step:6, [110.28135935917726] error:4.9780656368568214e10
step:7, [88.22508748598968] error:1.6312125479115152e10
step:8, [70.58006998549061] error:5.345157277259175e9
step:9, [56.46405598033311] error:1.7515011368750057e9
step:10, [45.17124476459026] error:5.739318927939218e8
step:11, [36.13699576363456] error:1.880660028934323e8
step:12, [28.909596493628225] error:6.162546809083989e7
step:13, [23.12767690857586] error:2.019343364672642e7
step:14, [18.502140827820813] error:6.616984600079321e6
step:15, [14.801710955616077] error:2.1682537764740223e6
step:16, [11.841364597887972] error:710493.6601951023
step:17, [9.473081505920845] error:232814.82529301933
step:18, [7.578440369694619] error:76289.02467289627
step:19, [6.062691662534009] error:24998.650327499203
step:20, [4.850005293778907] error:8191.820467507624
step:21, [3.8796427742733397] error:2684.558475795735
step:22, [3.102831417964252] error:879.938917658215
step:23, [2.4801074035032844] error:288.6013374802062
step:24, [1.9787996686353164] error:94.83231774361398
step:25, [1.5699953777982345] error:31.339550687638173
step:26, [1.223078070336621] error:10.538758840230674
step:27, [0.8890880276925446] error:3.736975418614904
step:28, [0.39119601698412665] error:1.5555508427614377
step:29, [-8.226933613726082] error:1.009161616775151
step:30, [-6.581590550407136] error:37685.86085236034
step:31, [-5.265379027893607] error:12348.640169535725
step:32, [-4.2125634247990424] error:4046.1397073372827
step:33, [-3.3706858428693875] error:1325.5763899070469
step:34, [-2.6980980505215157] error:434.10230585620286
step:35, [-2.1622524159745624] error:141.98439454738553
step:36, [-1.7389515817290095] error:46.2641612359542
step:37, [-1.4130328392552782] error:14.901476426894032
step:38, [-1.180593599978475] error:4.633279185531521
step:39, [-1.0474253413848853] error:1.293517841299023
step:40, [-1.0041045598332308] error:0.26071054379612724
step:41, [-1.0000334201918948] error:0.02069196621282332
step:42, [-1.0000000022336692] error:0.000167112128939495
step:43, [-1.0] error:1.1168346247814043e-8
step:44, [-1.0] error:0.0
=#
# ========== Question 2 ===========
#= PART 1
golden ratio = 1.61803 =#

function q2_f1(x::Vector)
    return x[1]^2 - x[1] - 1
end

println("Initial Guess: 1.5")
newton_method(q2_f1, [1.5], 50)
println("Initial Guess: 0.0")
newton_method(q2_f1, [0.0], 50)
println("Initial Guess: 1.0")
newton_method(q2_f1, [1.0], 50)
println("Initial Guess: 0.5")
newton_method(q2_f1, [0.5], 50)
println("Initial Guess: 0.49")
newton_method(q2_f1, [0.49], 50)
println("Initial Guess: 0.51")
newton_method(q2_f1, [0.51], 50)
#= OUTPUT
Initial Guess: 1.5
step:0, [1.5]
step:1, [1.625] error:0.25
step:2, [1.6180555555555556] error:0.015625
step:3, [1.6180339889579018] error:4.822530864223573e-5
step:4, [1.618033988749895] error:4.651177221148828e-10
CONVERGENCE

Initial Guess: 0.0
step:0, [0.0]
step:1, [-1.0] error:1.0
step:2, [-0.6666666666666667] error:1.0
step:3, [-0.6190476190476191] error:0.11111111111111116
step:4, [-0.6180344478216819] error:0.0022675736961450532
step:5, [-0.6180339887499892] error:1.0265159331446227e-6
step:6, [-0.6180339887498948] error:2.1094237467877974e-13
CONVERGENCE

Initial Guess: 1.0
step:0, [1.0]
step:1, [2.0] error:1.0
step:2, [1.6666666666666667] error:1.0
step:3, [1.619047619047619] error:0.11111111111111138
step:4, [1.618034447821682] error:0.0022675736961450532
step:5, [1.618033988749989] error:1.0265159333666674e-6
step:6, [1.618033988749895] error:2.1049828546892968e-13
CONVERGENCE

Initial Guess: 0.5
step:0, [0.5] error:1.25
step:1, [Inf] error:NaN
SINGULARITY

Initial Guess: 0.49
step:0, [0.49]
step:1, [-62.004999999999946] error:1.2499
step:2, [-30.762499200063967] error:3905.6250249999935
step:3, [-15.151241603742253] error:976.0938562340002
step:4, [-7.365553736000171] error:243.71136373871238
step:5, [-3.512237262141112] error:60.616935573906254
step:6, [-1.6618920709659004] error:14.848047847713609
step:7, [-0.8700446488659763] error:3.4237773265052294
step:8, [-0.6412118365903691] error:0.6270223398862964
step:9, [-0.618269358123613] error:0.05236445597396333
step:10, [-0.618034013519751] error:0.0005263573181975012
step:11, [-0.6180339887498951] error:5.538708269803294e-8
step:12, [-0.6180339887498948] error:6.661338147750939e-16
CONVERGENCE

Initial Guess: 0.51
step:0, [0.51]
step:1, [63.004999999999946] error:1.2499
step:2, [31.76249920006397] error:3905.625024999993
step:3, [16.151241603742257] error:976.0938562340004
step:4, [8.365553736000173] error:243.7113637387125
step:5, [4.512237262141113] error:60.61693557390628
step:6, [2.6618920709659006] error:14.848047847713616
step:7, [1.870044648865976] error:3.423777326505231
step:8, [1.6412118365903692] error:0.6270223398862957
step:9, [1.6182693581236132] error:0.05236445597396333
step:10, [1.6180340135197508] error:0.0005263573181979453
step:11, [1.6180339887498951] error:5.5387082475988336e-8
step:12, [1.618033988749895] error:6.661338147750939e-16
CONVERGENCE

EXPLANATION: It did converge at the golden ratio! We also found another root
at -0.61803. After some other tries of initial guess between 0.0 and 1.5, we found
that the dividing line is 0.5. Less than 0.5 yields the negative root, and more
than 0.5 yields the positive root. However, starting at 0.5 leads to singularity=#

# = PART 2 =
function q2_f2(x::Vector)
    return (x[1]-1)^5
end

println("n = 5")
newton_method(q2_f2, [1.5], 50)
#= OUTPUT
n = 5
step:0, [1.5]
step:1, [1.4] error:0.03125
step:2, [1.3199999999999998] error:0.010239999999999989
step:3, [1.2559999999999998] error:0.0033554431999999914
step:4, [1.2047999999999999] error:0.0010995116277759953
step:5, [1.16384] error:0.0003602879701896385
step:6, [1.131072] error:0.00011805916207174108
step:7, [1.1048576] error:3.8685626227668245e-5
step:8, [1.08388608] error:1.2676506002282358e-5
step:9, [1.0671088640000002] error:4.153837486827883e-6
step:10, [1.0536870912] error:1.3611294676837697e-6
step:11, [1.04294967296] error:4.46014903970614e-7
step:12, [1.034359738368] error:1.4615016373309154e-7
step:13, [1.0274877906944] error:4.789048565205975e-8
step:14, [1.02199023255552] error:1.5692754338466684e-8
step:15, [1.017592186044416] error:5.14220174162866e-9
Asymptotic Error Constant: 113.68683772161651

n = 7
step:0, [1.5]
step:1, [1.4] error:0.03125
step:2, [1.3199999999999998] error:0.010239999999999989
step:3, [1.2559999999999998] error:0.0033554431999999914
step:4, [1.2047999999999999] error:0.0010995116277759953
step:5, [1.16384] error:0.0003602879701896385
step:6, [1.131072] error:0.00011805916207174108
step:7, [1.1048576] error:3.8685626227668245e-5
step:8, [1.08388608] error:1.2676506002282358e-5
step:9, [1.0671088640000002] error:4.153837486827883e-6
step:10, [1.0536870912] error:1.3611294676837697e-6
step:11, [1.04294967296] error:4.46014903970614e-7
step:12, [1.034359738368] error:1.4615016373309154e-7
step:13, [1.0274877906944] error:4.789048565205975e-8
step:14, [1.02199023255552] error:1.5692754338466684e-8
step:15, [1.017592186044416] error:5.14220174162866e-9
Asymptotic Error Constant: 51.92856306243315

EXPLANATION
For both initial guesses of 5 and 7, we can see that Newton's Method ends up bouncing
back and forth and fails to quadratically converge.

I don't really get the Asympototic Error Constant and its relationship to n..
=#


# ========== Question 3 ===========
function generalized_newton_method(f, x::Vector, num_iter::Int64;
                       forward_err_threshold::Float64=1e-8)
    # f should be a vector valued function (returns multiple values)
    # this allows efficient generalization to finding roots of many scalar functions
    jacobian = (x_in -> ForwardDiff.jacobian(f, x_in))
    f_x = f(x)
    err_vec = abs.(f_x)
    # for the other error question
    #err_vec = x_in -> sqrt(((e^(x[1]+x[2])-e^7)^2)+((ln(3*x[1]-2*x[2])-ln(11))^2))
    println("step:", 0, ", ", x, " error:", err_vec)
    for i in 1:num_iter
        j = jacobian(x)
        #inv_j = inv(j)
        inv_j = C_NULL
        try
            inv_j = inv(j)
        catch e
            println("SINGULARITY")
            break
        end
        x = x - inv_j * f_x
        f_x = f(x)
        err_vec = abs.(f_x)
        println("step:",i, ", ", x, " error:", err_vec)
        if count(x_in->isinf(x_in), x) > 0
            println("SINGULARITY")
            break
        end
        if count(err->(isnan(err)||isinf(err)), err_vec) > 0
            println("DIVERGENCE")
            break
        end
        if count(err->(err>forward_err_threshold), err_vec) == 0
            println("CONVERGENCE")
            break
        end
    end
    return x
end
println("x+y=7;3x-2y=11")
function q3_f1(x::Vector)
    return [x[1]+x[2]-7, 3x[1]-2x[2]-11]
end
generalized_newton_method(q3_f1, [420.0, 69.0], 50)
generalized_newton_method(q3_f1, [1.8, 18], 50)
generalized_newton_method(q3_f1, [-9, 99.99], 50)

println("x+y=7;3x+3y=11")
function q3_f2a(x::Vector)
    return [x[1]+x[2]-7, 3x[1]+3x[2]-11]
end
function q3_f2b(x::Vector)
    return [x[1]+x[2]-7, 3x[1]+3x[2]-21]
end

generalized_newton_method(q3_f2a, [50.0, 5.0], 50)
println("x+y=7;3x+3y=21") # singularity
generalized_newton_method(q3_f2b, [50.0, 5.0], 50)

println("e^(x+y)=e^7;ln(3x-2y)=ln(11)")
function q3_f3(x::Vector)
    return [exp(x[1]+x[2])-exp(7), exp(3x[1]-2x[2])-log(11)]
end
generalized_newton_method(q3_f3, [420.0, 69.0], 50)
generalized_newton_method(q3_f3, [40.0, 60.0], 50)
generalized_newton_method(q3_f3, [20.0, 29.0], 50)
generalized_newton_method(q3_f3, [3.0, 5.0], 50)
#= OUTPUT
1) x+y=7;3x-2y=11
step:0, [420.0, 69.0] error:[482.0, 1111.0]
step:1, [5.0, 1.9999999999999716] error:[2.842170943040401e-14, 5.684341886080802e-14]
CONVERGENCE

x+y=7;3x-2y=11
step:0, [1.8, 18.0] error:[12.8, 41.6]
step:1, [4.999999999999999, 2.0] error:[8.881784197001252e-16, 3.552713678800501e-15]
CONVERGENCE

x+y=7;3x-2y=11
step:0, [-9.0, 99.99] error:[83.99, 237.98]
step:1, [5.0, 1.9999999999999858] error:[1.4210854715202004e-14, 2.842170943040401e-14]
CONVERGENCE

2) x+y=7;3x+3y=11
step:0, [420.0, 69.0] error:[482.0, 1456.0]
SINGULARITY

x+y=7;3x+3y=21
step:0, [50.0, 5.0] error:[48.0, 144.0]
SINGULARITY

3) e^(x+y)=e^7;ln(3x-2y)=ln(11)
step:0, [420.0, 69.0] error:[2.3442377254095393e212, Inf]
step:1, [NaN, NaN] error:[NaN, NaN]
DIVERGENCE

step:0, [40.0, 60.0] error:[2.6881171418161356e43, 1.3978952727983707]
step:1, [39.87957905455968, 59.12042094544032] error:[9.889030319346946e42, 1.648778580087531]
step:2, [39.39809096631596, 58.60190903368404] error:[3.637970947608805e42, 0.2945635363900143]
step:3, [38.97621033175362, 58.02378966824638] error:[1.3383347192042695e42, 0.015541211112447773]
step:4, [38.57492244112828, 57.42507755887172] error:[4.923458286012058e41, 4.99312162114407e-5]
step:5, [38.1749182766281, 56.8250817233719] error:[1.8112390828890233e41, 5.198845798304319e-10]
step:6, [37.774918276584735, 56.225081723415265] error:[6.663176216410896e40, 4.929390229335695e-14]
step:7, [37.37491827658474, 55.62508172341526] error:[2.451245542920086e40, 1.509903313490213e-14]
step:8, [36.97491827658474, 55.02508172341526] error:[9.017628405034299e39, 1.9095836023552692e-14]
step:9, [36.57491827658474, 54.42508172341526] error:[3.317400098335743e39, 1.9095836023552692e-14]
step:10, [36.17491827658474, 53.82508172341526] error:[1.2204032943178408e39, 1.9095836023552692e-14]
step:11, [35.77491827658474, 53.22508172341526] error:[4.489612819174345e38, 5.284661597215745e-14]
step:12, [35.37491827658474, 52.62508172341526] error:[1.6516362549940018e38, 1.509903313490213e-14]
step:13, [34.97491827658474, 52.02508172341526] error:[6.076030225056873e37, 1.9095836023552692e-14]
step:14, [34.57491827658474, 51.42508172341526] error:[2.235246603734715e37, 1.9095836023552692e-14]
step:15, [34.17491827658474, 50.82508172341526] error:[8.223012714622913e36, 1.9095836023552692e-14]
step:16, [33.77491827658474, 50.22508172341526] error:[3.0250773222011426e36, 5.284661597215745e-14]
step:17, [33.37491827658474, 49.62508172341526] error:[1.1128637547917594e36, 1.509903313490213e-14]
step:18, [32.97491827658474, 49.02508172341526] error:[4.0939969621274545e35, 1.9095836023552692e-14]
step:19, [32.57491827658474, 48.42508172341526] error:[1.5060973145850306e35, 1.9095836023552692e-14]
step:20, [32.17491827658474, 47.82508172341526] error:[5.54062238439351e34, 1.9095836023552692e-14]
step:21, [31.77491827658474, 47.22508172341526] error:[2.0382810665126688e34, 1.9095836023552692e-14]
step:22, [31.374918276584737, 46.625081723415256] error:[7.49841699699012e33, 1.9095836023552692e-14]
step:23, [30.974918276584734, 46.025081723415255] error:[2.758513454523131e33, 1.9095836023552692e-14]
step:24, [30.574918276584732, 45.42508172341525] error:[1.0148003881138743e33, 1.9095836023552692e-14]
step:25, [30.17491827658473, 44.82508172341525] error:[3.733241996798949e32, 1.509903313490213e-14]
step:26, [29.77491827658473, 44.22508172341525] error:[1.3733829795401567e32, 1.9095836023552692e-14]
step:27, [29.37491827658473, 43.62508172341525] error:[5.052393630275961e31, 1.509903313490213e-14]
step:28, [28.97491827658473, 43.02508172341525] error:[1.8586717452840752e31, 1.9095836023552692e-14]
step:29, [28.57491827658473, 42.425081723415246] error:[6.837671229762549e30, 1.9095836023552692e-14]
step:30, [28.174918276584727, 41.825081723415245] error:[2.5154386709190954e30, 1.9095836023552692e-14]
step:31, [27.774918276584724, 41.225081723415244] error:[9.253781725587524e29, 1.509903313490213e-14]
step:32, [27.374918276584726, 40.62508172341524] error:[3.404276049931644e29, 1.9095836023552692e-14]
step:33, [26.974918276584724, 40.02508172341524] error:[1.2523631708421782e29, 1.509903313490213e-14]
step:34, [26.574918276584725, 39.42508172341524] error:[4.607186634331161e28, 1.9095836023552692e-14]
step:35, [26.174918276584723, 38.82508172341524] error:[1.6948892444102614e28, 1.9095836023552692e-14]
step:36, [25.77491827658472, 38.22508172341524] error:[6.235149080811351e27, 1.9095836023552692e-14]
step:37, [25.37491827658472, 37.625081723415235] error:[2.293783159469512e27, 1.509903313490213e-14]
step:38, [24.97491827658472, 37.025081723415234] error:[8.438356668741095e26, 1.9095836023552692e-14]
step:39, [24.574918276584718, 36.42508172341523] error:[3.104297935701765e26, 1.509903313490213e-14]
step:40, [24.17491827658472, 35.82508172341523] error:[1.1420073898156275e26, 1.9095836023552692e-14]
step:41, [23.774918276584717, 35.22508172341523] error:[4.201210403790276e25, 1.9095836023552692e-14]
step:42, [23.374918276584715, 34.62508172341523] error:[1.545538935590016e25, 1.9095836023552692e-14]
step:43, [22.974918276584713, 34.02508172341523] error:[5.685719999335609e24, 1.509903313490213e-14]
step:44, [22.574918276584715, 33.425081723415225] error:[2.0916594960128772e24, 1.9095836023552692e-14]
step:45, [22.174918276584712, 32.825081723415224] error:[7.694785265141525e23, 1.509903313490213e-14]
step:46, [21.774918276584714, 32.22508172341522] error:[2.8307533032745128e23, 1.9095836023552692e-14]
step:47, [21.37491827658471, 31.625081723415224] error:[1.0413759433028422e23, 1.7763568394002505e-15]
step:48, [20.974918276584713, 31.025081723415223] error:[3.831008000716332e22, 1.7763568394002505e-15]
step:49, [20.574918276584715, 30.42508172341522] error:[1.4093490824268487e22, 3.597122599785507e-14]
step:50, [20.174918276584712, 29.825081723415224] error:[5.184705528586741e21, 1.7763568394002505e-15]

step:0, [20.0, 29.0] error:[1.9073465724950995e21, 4.99116082613228]
step:1, [19.46490396718318, 28.53509603281682] error:[7.016735912097631e20, 1.3624840495470512]
step:2, [18.992438721911206, 28.007561278088794] error:[2.5813128861900675e20, 0.21953653120445438]
step:3, [18.575663764804876, 27.424336235195124] error:[9.496119420602448e19, 0.00895469207072086]
step:4, [18.17491966424178, 26.82508033575822] error:[3.4934271057485095e19, 1.6637339026459586e-5]
step:5, [17.774918276589553, 26.225081723410447] error:[1.2851600114359306e19, 5.772671229919979e-11]
step:6, [17.374918276584737, 25.625081723415263] error:[4.727839468229345e18, 1.509903313490213e-14]
step:7, [16.974918276584738, 25.025081723415262] error:[1.7392749415205e18, 1.7763568394002505e-15]
step:8, [16.57491827658474, 24.42508172341526] error:[6.398434935300538e17, 1.9095836023552692e-14]
step:9, [16.174918276584737, 23.825081723415263] error:[2.3538526683701888e17, 1.7763568394002505e-15]
step:10, [15.774918276584739, 23.225081723415265] error:[8.659340042399264e16, 1.509903313490213e-14]
step:11, [15.374918276584745, 22.62508172341527] error:[3.185593175711311e16, 1.9095836023552692e-14]
step:12, [14.974918276584757, 22.025081723415294] error:[1.1719142372802098e16, 1.509903313490213e-14]
step:13, [14.574918276584796, 21.42508172341535] error:[4.3112315471147115e15, 1.7763568394002505e-15]
step:14, [14.174918276584897, 20.8250817234155] error:[1.586013452312965e15, 1.7763568394002505e-15]
step:15, [13.774918276585174, 20.225081723415915] error:[5.834617425269925e14, 1.7763568394002505e-15]
step:16, [13.374918276585925, 19.625081723417043] error:[2.1464357978545694e14, 1.7763568394002505e-15]
step:17, [12.97491827658797, 19.025081723420108] error:[7.896296018222198e13, 1.7763568394002505e-15]
step:18, [12.574918276593523, 18.42508172342844] error:[2.904884966478879e13, 1.7763568394002505e-15]
step:19, [12.174918276608624, 17.825081723451092] error:[1.068647458106596e13, 1.7763568394002505e-15]
step:20, [11.774918276649672, 17.225081723512663] error:[3.9313342966855986e12, 1.7763568394002505e-15]
step:21, [11.37491827676125, 16.62508172368003] error:[1.446257063833045e12, 1.7763568394002505e-15]
step:22, [10.974918277064551, 16.02508172413498] error:[5.320482401433739e11, 1.7763568394002505e-15]
step:23, [10.574918277889013, 15.425081725371674] error:[1.9572960897041873e11, 1.0658141036401503e-14]
step:24, [10.17491828013013, 14.825081728733354] error:[7.2004898878967e10, 6.661338147750939e-15]
step:25, [9.774918286222123, 14.22508173787134] error:[2.648912167142501e10, 6.661338147750939e-15]
step:26, [9.374918302781873, 13.625081762710966] error:[9.744802987830631e9, 1.7763568394002505e-15]
step:27, [8.97491834779594, 13.025081830232066] error:[3.584912387713378e9, 6.661338147750939e-15]
step:28, [8.574918470156847, 12.425082013773425] error:[1.3188152760650675e9, 1.0658141036401503e-14]
step:29, [8.174918802768174, 11.825082512690416] error:[4.851647369917755e8, 6.661338147750939e-15]
step:30, [7.774919706898748, 11.225083868886276] error:[1.7848184254550853e8, 1.7763568394002505e-15]
step:31, [7.374922164574901, 10.625087555400507] error:[6.56595107205592e7, 1.7763568394002505e-15]
step:32, [6.974928845190282, 10.025097576323578] error:[2.415449433926712e7, 1.7763568394002505e-15]
step:33, [6.574947004682379, 9.425124815561723] error:[8.885652112894628e6, 1.7763568394002505e-15]
step:34, [6.174996365058812, 8.825198856126374] error:[3.2685589830568507e6, 1.7763568394002505e-15]
step:35, [5.775130523916765, 8.225400094413303] error:[1.2021459442134055e6, 1.7763568394002505e-15]
step:36, [5.375495083209812, 7.625946933352874] error:[441955.18649030896, 2.220446049250313e-15]
step:37, [4.976485155350176, 7.027432041563419] error:[162296.95114913446, 1.7763568394002505e-15]
step:38, [4.579169797254754, 6.431459004420287] error:[59417.29298230849, 1.7763568394002505e-15]
step:39, [4.186418595859412, 5.842332202327275] error:[21572.30261626343, 2.220446049250313e-15]
step:40, [3.8057690085885847, 5.271357821421033] error:[7656.148476877563, 1.7763568394002505e-15]
step:41, [3.455884878222758, 4.746531625872293] error:[2553.1261594497937, 2.220446049250313e-15]
step:42, [3.1760717796501075, 4.326811978013317] error:[716.630737320924, 2.220446049250313e-15]
step:43, [3.0179854163798003, 4.089682433107855] error:[124.66281777402128, 1.7763568394002505e-15]
step:44, [2.9771557337465535, 4.028437909157986] error:[6.151362509076989, 1.7763568394002505e-15]
step:45, [2.9749245227013175, 4.025091092590132] error:[0.017124380082577773, 2.220446049250313e-15]
step:46, [2.974918276633505, 4.025081723488412] error:[1.3369890439207666e-7, 1.7763568394002505e-15]
step:47, [2.974918276584738, 4.025081723415262] error:[0.0, 1.7763568394002505e-15]
CONVERGENCE

step:0, [3.0, 5.0] error:[1884.3248286132698, 2.0300158316269283]
step:1, [3.8507828057877083, 3.5170966353837345] error:[487.6375208707675, 89.2684356742258]
step:2, [3.5328948474750237, 3.527185221251765] error:[67.90524671891421, 32.21803885298019]
step:3, [3.323424785848724, 3.6783444135939205] error:[1.9418800527134863, 11.250002908165174]
step:4, [3.1578571391324735, 3.842144424978316] error:[0.0017152570965208724, 3.587261706418925]
step:5, [3.03798457967387, 3.962015420327353] error:[1.341277311439626e-9, 0.8889325050255832]
step:6, [2.983893975290446, 4.016106024709554] error:[0.0, 0.11006523574589266]
step:7, [2.975116705044689, 4.024883294955311] error:[0.0, 0.0023802339006504525]
step:8, [2.9749183749868267, 4.025081625013174] error:[0.0, 1.1797898076260083e-6]
step:9, [2.974918276584762, 4.025081723415238] error:[0.0, 2.873257187729905e-13]
CONVERGENCE

EXPLANATION
1) For all the initial guesses, it only takes 1 iteration to converge! It's indeed amazing!

2) For the initial guesses it did not converge because the lines do not intersect. Even when
the equation is 3x + 3y = 21, which would be both of the same line, it does not converge because
they are linearly dependent. Since Newton Raphson includes a determinant, it includes a check of
colinearity as in this case.

3) The first initial guess diverged because the derivative creates a 1/large number calculation,
resulting in eventually going to infinity/NaN.
The code kept reaching the max iterations starting from an initial guess of [0.0, 1.0] and
from there I chose new initial guesses based on where it stopped (not included in output for clarity
and space). Eventually it was able to converge, though it was interesting that with initial values of
[1.0, 2.0] it still reaches the max iteration before converging, compared to a further guess of [20.0, 20.9].
But if the guess is [3.0, 5.0] it converges in 9 steps. It seems like there is no quadratic convergence with the
new error definition.
=#
